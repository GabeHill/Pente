using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using PenteProject;

namespace PenteTest
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void TestPrintBoard()
        {
            Game g = new Game();
            g.createBoard();
            char[,] board = g.printBoard();
            string res = "";

            res += "   a b c d e f g h i j k l m n o p q r s\n";
            for (int i = 0; i < 19; i++)
            {
                res += (i + 1) + " ";
                if(i < 9) { res += " "; }

                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j] + " ";
                }
                res += "\n";
            }


            string expected = "   a b c d e f g h i j k l m n o p q r s\n1  + + + + + + + + + + + + + + + + + + + \n2  + + + + + + + + + + + + + + + + + + + \n3  + + + + + + + + + + + + + + + + + + + \n4  + + + + + + + + + + + + + + + + + + + \n5  + + + + + + + + + + + + + + + + + + + \n6  + + + + + + + + + + + + + + + + + + + \n7  + + + + + + + + + + + + + + + + + + + \n8  + + + + + + + + + + + + + + + + + + + \n9  + + + + + + + + + + + + + + + + + + + \n10 + + + + + + + + + + + + + + + + + + + \n11 + + + + + + + + + + + + + + + + + + + \n12 + + + + + + + + + + + + + + + + + + + \n13 + + + + + + + + + + + + + + + + + + + \n14 + + + + + + + + + + + + + + + + + + + \n15 + + + + + + + + + + + + + + + + + + + \n16 + + + + + + + + + + + + + + + + + + + \n17 + + + + + + + + + + + + + + + + + + + \n18 + + + + + + + + + + + + + + + + + + + \n19 + + + + + + + + + + + + + + + + + + + \n";

            Assert.AreEqual(expected, res);
        }

        #region TestPlacePiece

        [TestMethod]
        public void TestPlacePiece0_0_b()
        {
            Game g = new Game();

            string expected = "B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard();

            char[,] board = g.placePiece('a', 0, 'B'); //[x,y,piece color]

            string res = "";

            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }


            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_0_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard();

            char[,] board = g.placePiece('s', 0, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_1_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 1, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_1_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 1, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_2_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 2, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_2_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 2, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_3_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 3, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_3_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 3, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_4_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 4, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_4_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 4, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_5_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 5, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_5_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 5, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_6_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 6, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_6_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 6, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_7_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 7, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_7_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 7, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_8_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 8, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_8_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 8, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_9_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 9, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_9_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 9, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_10_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 10, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_10_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 10, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_11_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 11, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_11_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 11, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_12_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 12, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_12_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 12, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_13_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 13, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_13_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 13, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_14_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 14, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_14_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 14, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_15_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 15, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_15_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 15, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_16_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 16, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_16_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 16, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_17_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 17, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_17_b()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B+++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 17, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_18_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 18, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_18_b()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++B";

            g.createBoard(); char[,] board = g.placePiece('s', 18, 'B'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);


        }

        [TestMethod]
        public void TestPlacePiece0_0_w()
        {
            Game g = new Game();

            string expected = "W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 0, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }


            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_0_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 0, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_1_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 1, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_1_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 1, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_2_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 2, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_2_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 2, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_3_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 3, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_3_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 3, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_4_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 4, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_4_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 4, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_5_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 5, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_5_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 5, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_6_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 6, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_6_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 6, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_7_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 7, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_7_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 7, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_8_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 8, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_8_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 8, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_9_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 9, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_9_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 9, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_10_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 10, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_10_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 10, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_11_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 11, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_11_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 11, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_12_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 12, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_12_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 12, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_13_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 13, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_13_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 13, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_14_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 14, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_14_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 14, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_15_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 15, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_15_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 15, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_16_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 16, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_16_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 16, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_17_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 17, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_17_w()
        {
            Game g = new Game();

            string expected = "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W+++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('s', 17, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece0_18_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W++++++++++++++++++";

            g.createBoard(); char[,] board = g.placePiece('a', 18, 'W'); //[x,y,piece color]

            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);
        }
        [TestMethod]
        public void TestPlacePiece18_18_w()
        {
            Game g = new Game();

            string expected = "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++W";

            g.createBoard(); char[,] board = g.placePiece('s', 18, 'W'); //[x,y,piece color]


            string res = "";


            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += board[i, j];
                }
            }

            Assert.AreEqual(res, expected);


        }

        #endregion

        [TestMethod]
        public void TestCapturePair()
        {
            Game g = new Game();

            g.createBoard();

            string res = "";
            string expected1 = "B++B+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";

            //expected1.Replace('\n', '\0');

            char p1 = 'B';
            char p2 = 'W';

            g.capturePair('a', 0, p1);
            g.placePiece('a', 0, p1); // (column, row, player)
            g.capturePair('b', 0, p2);
            g.placePiece('b', 0, p2); // (column, row, player)
            g.capturePair('c', 0, p2);
            g.placePiece('c', 0, p2); // (column, row, player)
            g.capturePair('d', 0, p1);
            g.placePiece('d', 0, p1); // (column, row, player)

            for (int i = 0; i < 19; i++)
            {
                for (int j = 0; j < 19; j++)
                {
                    res += g.board[i, j];
                }
            }

            Assert.AreEqual(expected1, res);
        }
        #region Win Check Tests

        [TestMethod]
        public void TestWinCheckBHorizontal()
        {
            Game g = new Game();

            g.createBoard();
            
            char p1 = 'B';
            char p2 = 'W';
            //column, row, player
            g.placePiece('a', 0, p1);
            g.placePiece('b', 0, p1);
            g.placePiece('c', 0, p1);
            g.placePiece('d', 0, p1);
            g.placePiece('e', 0, p1);
            if (g.checkWin(('e' - 97), 0, p1))
            {
                g.winResult(p1);
                Assert.IsTrue(g.hasWon);
            }
        }

        [TestMethod]
        public void TestWinCheckBVertical()
        {
            Game g = new Game();

            g.createBoard();

            char p1 = 'B';
            char p2 = 'W';
            //column, row, player
            g.placePiece('a', 0, p1);
            g.placePiece('a', 1, p1);
            g.placePiece('a', 2, p1);
            g.placePiece('a', 3, p1);
            g.placePiece('a', 4, p1);
            if (g.checkWin(('a' - 97), 4, p1))
            {
                g.winResult(p1);
                Assert.IsTrue(g.hasWon);
            }
        }

        [TestMethod]
        public void TestWinCheckBDiagonal()
        {
            Game g = new Game();

            g.createBoard();

            char p1 = 'B';
            char p2 = 'W';
            //column, row, player
            g.placePiece('a', 0, p1);
            g.placePiece('b', 1, p1);
            g.placePiece('c', 2, p1);
            g.placePiece('d', 3, p1);
            g.placePiece('e', 4, p1);
            if (g.checkWin(('e' - 97), 4, p1))
            {
                g.winResult(p1);
                Assert.IsTrue(g.hasWon);
            }
        }

        [TestMethod]
        public void TestWinCheckWHorizontal()
        {
            Game g = new Game();

            g.createBoard();

            char p1 = 'B';
            char p2 = 'W';
            //column, row, player
            g.placePiece('a', 0, p2);
            g.placePiece('b', 0, p2);
            g.placePiece('c', 0, p2);
            g.placePiece('d', 0, p2);
            g.placePiece('e', 0, p2);
            if (g.checkWin(('e' - 97), 0, p2))
            {
                g.winResult(p2);
                Assert.IsTrue(g.hasWon);
            }
        }

        [TestMethod]
        public void TestWinCheckWVertical()
        {
            Game g = new Game();

            g.createBoard();

            char p1 = 'B';
            char p2 = 'W';
            //column, row, player
            g.placePiece('a', 0, p2);
            g.placePiece('a', 1, p2);
            g.placePiece('a', 2, p2);
            g.placePiece('a', 3, p2);
            g.placePiece('a', 4, p2);
            if (g.checkWin(('a' - 97), 4, p2))
            {
                g.winResult(p2);
                Assert.IsTrue(g.hasWon);
            }
        }

        [TestMethod]
        public void TestWinCheckWDiagonal()
        {
            Game g = new Game();

            g.createBoard();

            char p1 = 'B';
            char p2 = 'W';
            //column, row, player
            g.placePiece('a', 0, p2);
            g.placePiece('b', 1, p2);
            g.placePiece('c', 2, p2);
            g.placePiece('d', 3, p2);
            g.placePiece('e', 4, p2);
            if (g.checkWin(('e' - 97), 4, p2))
            {
                g.winResult(p2);
                Assert.IsTrue(g.hasWon);
            }
        }

        #endregion
    }
}

